%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CONCRETE LANGUAGE SYNTAX AND SEMANTICS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\textlang}[1]{\texttt{#1}}
\newcommand{\langkw}[1]{\textlang{\color{blue} #1}}
\newcommand{\lvar}[1]{\textit{#1}} % Yes, this makes language-level variables look like logic-level variables. but we still distinguish locally bound variables from global definitions.
\newcommand{\lvarA}{\lvar{\var}}
\newcommand{\lvarB}{\lvar{\varB}}
\newcommand{\lvarC}{\lvar{\varC}}

\newcommand{\loc}{\ell}

\def\Let#1=#2in{\langkw{let} \spac #1 \mathrel{=} #2 \spac \langkw{in} \spac}
\def\If#1then{\langkw{if} \spac #1 \spac \langkw{then} \spac}
\def\Else{\spac\langkw{else} \spac}
\def\Ref(#1){\langkw{ref}(#1)}
\def\Rec#1 #2={\langkw{rec}\spac{#1}({#2}) \mathrel{=} }
\def\Skip{\langkw{skip}}
\def\Assert{\langkw{assert}}
\newcommand\Inj[1]{\langkw{inj}_{#1}\spac}
\newcommand\Proj[1]{\pi_{#1}\spac}
\def\True{\langkw{true}}
\def\False{\langkw{false}}
\def\Match#1with#2=>#3|#4=>#5end{\langkw{match}\spac#1\spac\langkw{with}\spac#2\Ra#3\mid#4\Ra#5\spac\langkw{end}}
\def\MatchML#1with#2=>#3|#4=>#5end#6{{\arraycolsep=1.4pt\begin{array}[t]{rll}%
    \multicolumn{3}{l}{\langkw{match}\spac#1\spac\langkw{with}}\\%
    &#2&\Ra#3\\|&#4&\Ra#5\\%
    \multicolumn{3}{l}{\langkw{end}#6}%
  \end{array}}}
\def\MatchMLL#1with#2=>#3|#4=>#5|#6=>#7end#8{{\arraycolsep=1.4pt\begin{array}[t]{rll}%
    \multicolumn{3}{l}{\langkw{match}\spac#1\spac\langkw{with}}\\%
    &#2&\Ra#3\\|&#4&\Ra#5\\|&#6&\Ra#7\\%
    \multicolumn{3}{l}{\langkw{end}#8}%
  \end{array}}}
\def\MatchS#1with#2=>#3end{
  \langkw{match}\spac#1\spac\langkw{with}\spac#2\Ra#3\spac\langkw{end}}
\newcommand\CAS{\langkw{CAS}}
\newcommand*\Fork[1]{\langkw{fork}\spac\set{#1}}
\newcommand\deref{\mathop{!}}
\renewcommand\gets{\mathop{:=}}

\newcommand{\fold}{\langkw{fold}\spac}
\newcommand{\unfold}{\langkw{unfold}\spac}

\newcommand{\Op}[1]{\mathrel{#1}}

\newcommand{\binop}{\circledcirc}
\newcommand{\Plus}{\Op{+}}
\newcommand{\Minus}{\Op{-}}
\newcommand{\Mult}{\Op{*}}
\newcommand{\Eq}{\Op{=}}
\newcommand{\Lt}{\Op{<}}

\newcommand{\TT}{()}

\newcommand{\fetchandadd}{\langkw{fetchandadd}}
